<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Functions</h2>

<p>In HTML the value of <b>this</b>, in a global function, is the window object.</p>

<p id="demo"></p>



<script>

let x = myFunction();

function myFunction() {
  return this;
}

document.getElementById("demo").innerHTML = x; 

</script>




</body>
</html>




<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- 


    The this Keyword



In JavaScript, the thing called this, is the object that "owns" the current code.

The value of this, when used in a function, is the object that "owns" the function.





Note that this is not a variable. It is a keyword. You cannot change the value of this.



Tip: Read more about the this keyword at JS this Keyword.



-->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- 


    The Global Object


When a function is called without an owner object, the value of this becomes the global object.

In a web browser the global object is the browser window.







This example returns the window object as the value of this:

Example



let x = myFunction();            // x will be the window object

function myFunction() {
  return this;
}









Invoking a function as a global function, causes the value of this to be the global object.

Using the window object as a variable can easily crash your program.



-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
