<!DOCTYPE html>
<html>
<body>

<h2>The JavaScript <i>this</i> Keyword</h2>
<p>In this example, <b>this</b> represents the <b>person</b> object.</p>
<p>Because the person object "owns" the fullName method.</p>

<p id="demo"></p>
<p id="demo1"></p>

<script>
  
// Create an object:
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

// Display data from the object:
document.getElementById("demo").innerHTML = person.fullName();

// If you access the fullName property, without (), it will return the function definition:
document.getElementById("demo1").innerHTML = person.fullName;

</script>

</body>
</html>








<!-- -->
<!-- -->
<!-- -->
<!-- 

    JavaScript Object Methods


-->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!--

    The this Keyword


In a function definition, this refers to the "owner" of the function.

In the example above, this is the person object that "owns" the fullName function.

In other words, this.firstName means the firstName property of this object.


 -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--

    JavaScript Methods


JavaScript methods are actions that can be performed on objects.

A JavaScript method is a property containing a function definition.



Methods are functions stored as object properties.

 -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- 

    Accessing Object Methods
You access an object method with the following syntax:

objectName.methodName()
You will typically describe fullName() as a method of the person object, and fullName as a property.

The fullName property will execute (as a function) when it is invoked with ().

This example accesses the fullName() method of a person object:


-->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
