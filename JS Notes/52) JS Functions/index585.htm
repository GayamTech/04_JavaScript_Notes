<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Functions</h2>

<p>The global function (myFunction) returns the product of the arguments (a ,b):</p>

<p id="demo"></p>



<script>

function myFunction(a, b) {
  return a * b;
}

document.getElementById("demo").innerHTML = myFunction(10, 2); 

</script>



</body>
</html>



<!-- -->
<!-- -->
<!-- -->
<!-- 

    JavaScript Function Invocation


The code inside a JavaScript function will execute when "something" invokes it.



-->
<!-- -->
<!-- -->
<!-- -->
<!-- 


    Invoking a JavaScript Function


The code inside a function is not executed when the function is defined.

The code inside a function is executed when the function is invoked.

It is common to use the term "call a function" instead of "invoke a function".

It is also common to say "call upon a function", "start a function", or "execute a function".

In this tutorial, we will use invoke, because a JavaScript function can be invoked without being called.



--> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- 

    Invoking a Function as a Function



Example



function myFunction(a, b) {
  return a * b;
}
myFunction(10, 2);           // Will return 20




-->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
