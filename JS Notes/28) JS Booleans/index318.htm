<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Booleans</h2>
<p>Never create booleans as objects.</p>
<p>Booleans and objects cannot be safely compared.</p>

<p id="demo"></p>

<script>
let x = false;         // x is a boolean
let y = new Boolean(false);  // y is an object
document.getElementById("demo").innerHTML = typeof x + "<br>" + typeof y;
</script>

</body>
</html>





<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--


JavaScript Booleans




-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--



Booleans Can be Objects
Normally JavaScript booleans are primitive values created from literals:

let x = false;

But booleans can also be defined as objects with the keyword new:

let y = new Boolean(false);





-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--



A JavaScript Boolean represents one of two values: true or false.


Boolean Values:


Very often, in programming, you will need a data type that can only have one of two values, like



YES / NO
ON / OFF
TRUE / FALSE




For this, JavaScript has a Boolean data type. It can only take the values true or false.








-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--


Comparisons and Conditions:




The chapter JS Comparisons gives a full overview of comparison operators.

The chapter JS Conditions gives a full overview of conditional statements.

Here are some examples:


Operator                    Description                 Example
==                          equal to                    if (day == "Monday")
>                           greater than                if (salary > 9000)
<                           less than                   if (age < 18)


The Boolean value of an expression is the basis for all JavaScript comparisons and conditions.






-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
